// This file is @generated by prost-build.
/// @TODO: Links between Filter and Nat
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FilterRule {
    #[prost(bool, tag = "1")]
    pub disabled: bool,
    #[prost(string, tag = "2")]
    pub policy: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub protocol: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub source_inversed: bool,
    #[prost(string, tag = "5")]
    pub source_port: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub source_addr: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub source_type: ::prost::alloc::string::String,
    #[prost(bool, tag = "8")]
    pub destination_inversed: bool,
    #[prost(string, tag = "9")]
    pub destination_port: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub destination_addr: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub destination_type: ::prost::alloc::string::String,
    #[prost(string, tag = "12")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag = "13")]
    pub interface: ::prost::alloc::string::String,
    #[prost(uint32, tag = "14")]
    pub id: u32,
    #[prost(uint32, tag = "15")]
    pub order: u32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NatRule {
    #[prost(bool, tag = "1")]
    pub disabled: bool,
    #[prost(string, tag = "3")]
    pub protocol: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub source_inversed: bool,
    #[prost(string, tag = "5")]
    pub source_port: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub source_addr: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub source_type: ::prost::alloc::string::String,
    #[prost(bool, tag = "8")]
    pub destination_inversed: bool,
    #[prost(string, tag = "9")]
    pub destination_port: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub destination_addr: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub destination_type: ::prost::alloc::string::String,
    #[prost(string, tag = "12")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag = "13")]
    pub interface: ::prost::alloc::string::String,
    #[prost(string, tag = "14")]
    pub redirect_ip: ::prost::alloc::string::String,
    #[prost(uint32, tag = "15")]
    pub redirect_port: u32,
    #[prost(uint32, tag = "16")]
    pub order: u32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IpAddress {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub version: u32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NetworkInterface {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub device: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub addresses: ::prost::alloc::vec::Vec<IpAddress>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SshConfig {
    #[prost(bool, tag = "1")]
    pub enabled: bool,
    #[prost(uint32, tag = "2")]
    pub port: u32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Alias {
    #[prost(string, tag = "1")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub value: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub description: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Configuration {
    #[prost(string, tag = "1")]
    pub digest: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub aliases: ::prost::alloc::vec::Vec<Alias>,
    #[prost(message, repeated, tag = "3")]
    pub filter_rules: ::prost::alloc::vec::Vec<FilterRule>,
    #[prost(message, repeated, tag = "4")]
    pub nat_rules: ::prost::alloc::vec::Vec<NatRule>,
    #[prost(message, repeated, tag = "5")]
    pub interfaces: ::prost::alloc::vec::Vec<NetworkInterface>,
    #[prost(string, tag = "6")]
    pub hostname: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub gui_protocol: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "8")]
    pub ssh_config: ::core::option::Option<SshConfig>,
}
